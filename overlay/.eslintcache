[{"/home/nikita/dapplets/my-nifty-collection/overlay/src/index.tsx":"1","/home/nikita/dapplets/my-nifty-collection/overlay/src/App.tsx":"2","/home/nikita/dapplets/my-nifty-collection/overlay/src/dappletBridge.ts":"3"},{"size":267,"mtime":1618412586676,"results":"4","hashOfConfig":"5"},{"size":8003,"mtime":1618846327664,"results":"6","hashOfConfig":"5"},{"size":1938,"mtime":1618843286506,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1rhfgv8",{"filePath":"11","messages":"12","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nikita/dapplets/my-nifty-collection/overlay/src/index.tsx",[],["16","17"],"/home/nikita/dapplets/my-nifty-collection/overlay/src/App.tsx",["18","19","20","21","22","23"],"import React from 'react';\nimport { Header, Menu, Dropdown, Icon, Input, Card, Feed, Button } from 'semantic-ui-react';\nimport { bridge } from './dappletBridge';\n\nlet counter = 0;\n\ninterface Props {}\n\ninterface State {\n  user: string;\n  current: boolean;\n  nfts: {\n    name: string;\n    description: string;\n    image: string;\n    link: string;\n    issued_at: string;\n    program: string;\n    cohort: string;\n    owner: string;\n  }[];\n  searchQuery: string;\n  isConnected: boolean;\n  linkStateChanged: boolean;\n  currentNearAccount: string;\n  nearWalletLink: string;\n}\n\nconst defaultState = {\n  user: '',\n  current: true,\n  nfts: [\n    {\n      name: '',\n      description: '',\n      image: '',\n      link: '',\n      issued_at: '',\n      program: '',\n      cohort: '',\n      owner: '',\n    }\n  ],\n  searchQuery: '',\n  isConnected: true,\n  linkStateChanged: false,\n  currentNearAccount: '',\n  nearWalletLink: '',\n};\n\nexport default class App extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { ...defaultState };\n  }\n\n  async getData() {\n    const { current, user, nearWalletLink } = this.state;\n    const currentNearAccount = await bridge.getCurrentNearAccount();\n    const currentExternalAccounts = await bridge.getExternalAccounts(currentNearAccount);\n    if (current) {\n      if (!currentExternalAccounts.length) {\n        this.setState({\n          isConnected: false,\n          user,\n          current,\n          currentNearAccount,\n          nearWalletLink,\n        });\n      } else {\n        const nfts = await bridge.getNftsByNearAccount(currentNearAccount);\n        this.setState({\n          user,\n          nfts: nfts.length ? nfts : defaultState.nfts,\n          current,\n          currentNearAccount,\n        });\n      }\n    } else {\n      const nearAcc = await bridge.getNearAccounts(user);\n      const nfts = await bridge.getNftsByNearAccount(nearAcc[0]);\n      this.setState({ user, nfts, current });\n    }\n  }\n\n  componentDidMount() {\n    bridge.onData((data) => this.setState({ ...data }, () => this.getData()));\n  }\n\n  handleLink = async () => {\n    await bridge.addExternalAccount(this.state.user);\n    await this.setState({ isConnected: true, linkStateChanged: true });\n    await this.getData();\n    bridge.afterLinking();\n  };\n\n  handleUnlink = async () => {\n    await bridge.removeExternalAccount(this.state.user);\n    await this.setState({ isConnected: false, linkStateChanged: true });\n    bridge.afterLinking();\n  };\n\n  render() {\n    const { current, user, nfts, isConnected, searchQuery, currentNearAccount, linkStateChanged } = this.state;\n    return (\n      user && (\n        <div className=\"overlay-container\">\n          {current && isConnected && (\n            <div style={{ display: 'inline-block', marginRight: '1em' }}>\n              <Dropdown item icon=\"ellipsis vertical\" simple style={{ fontSize: '1.2em' }}>\n                <Dropdown.Menu>\n                  <Dropdown.Item>\n                    Connected to{' '}\n                    <a href={this.state.nearWalletLink} target=\"_blank\">\n                      {currentNearAccount}\n                    </a>\n                  </Dropdown.Item>\n                  <Dropdown.Item onClick={this.handleUnlink}>Unlink account @{user}</Dropdown.Item>\n                </Dropdown.Menu>\n              </Dropdown>\n            </div>\n          )}\n          <Header as=\"h2\" style={{ display: 'inline-block', marginTop: '0' }}>\n            {current ? 'My' : user} NFT Collection\n          </Header>\n          {!isConnected && current ? (\n            <Card style={{ width: 'auto' }}>\n              {linkStateChanged && (\n                <Card.Content style={{ color: 'forestgreen' }}>\n                  <p>\n                    Twitter account <b>@{user}</b> has been unlinked from <b>{currentNearAccount}</b>\n                  </p>\n                </Card.Content>\n              )}\n              <Card.Content>\n                <p>\n                  Dapplet connected to{' '}\n                  <a href={this.state.nearWalletLink} target=\"_blank\">\n                    {currentNearAccount}\n                  </a>\n                </p>\n                <p>Current twitter account - @{user}</p>\n                <Button primary onClick={this.handleLink}>\n                  Link\n                </Button>\n              </Card.Content>\n            </Card>\n          ) : (\n            <>\n              <Input\n                icon=\"search\"\n                placeholder=\"Search...\"\n                style={{ width: '-webkit-fill-available' }}\n                onChange={(e: any) => this.setState({ searchQuery: e.target.value })}\n                value={searchQuery}\n              />\n              <Card className=\"overlay-card\">\n                {linkStateChanged && current && (\n                  <Card.Content style={{ color: 'forestgreen' }}>\n                    <p>\n                      Twitter account <b>@{user}</b> has been linked to <b>{currentNearAccount}</b>\n                    </p>\n                  </Card.Content>\n                )}\n                {nfts[0].name === '' ? (\n                  <Card.Content description=\"You don't have NFTs yet.\" />\n                ) : (\n                  <Card.Content>\n                    <Feed>\n                      {nfts\n                        .reverse()\n                        .filter((nft) => {\n                          const reg = new RegExp(\n                            `${searchQuery.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')}`,\n                            'gi',\n                          );\n                          return reg.exec(nft.name)\n                            || reg.exec(nft.description)\n                            || reg.exec(nft.issued_at)\n                            || reg.exec(nft.program)\n                            || reg.exec(nft.cohort)\n                            || reg.exec(nft.owner);\n                        })\n                        .map((nft) => (\n                          <Feed.Event style={{ margin: '10px 0' }} key={counter++}>\n                            <Feed.Label image={nft.image} />\n                            <Feed.Content>\n                              <Feed.Summary>\n                                {nft.name}\n                              </Feed.Summary>\n                              <Feed.Summary style={{ fontWeight: 'normal' }}>\n                                <b>Description: </b>\n                                {nft.description}\n                              </Feed.Summary>\n                              <Feed.Summary style={{ fontWeight: 'normal' }}>\n                                <b>Link: </b>\n                                <a href={nft.link} target=\"_blank\">\n                                  view certificate\n                                </a>\n                              </Feed.Summary>\n                              <Feed.Summary style={{ fontWeight: 'normal' }}>\n                                <b>Issued at: </b>\n                                {(new Date(nft.issued_at)).toLocaleDateString()}\n                              </Feed.Summary>\n                              <Feed.Summary style={{ fontWeight: 'normal' }}>\n                                <b>Program: </b>\n                                {nft.program}\n                              </Feed.Summary>\n                              <Feed.Summary style={{ fontWeight: 'normal' }}>\n                                <b>Cohort: </b>\n                                {nft.cohort}\n                              </Feed.Summary>\n                              <Feed.Summary style={{ fontWeight: 'normal' }}>\n                                <b>Owner: </b>\n                                {nft.owner}\n                              </Feed.Summary>\n                            </Feed.Content>\n                          </Feed.Event>\n                        ))}\n                    </Feed>\n                  </Card.Content>\n                )}\n              </Card>\n            </>\n          )}\n        </div>\n      )\n    );\n  }\n}\n","/home/nikita/dapplets/my-nifty-collection/overlay/src/dappletBridge.ts",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":2,"column":18,"nodeType":"30","messageId":"31","endLine":2,"endColumn":22},{"ruleId":"28","severity":1,"message":"32","line":2,"column":34,"nodeType":"30","messageId":"31","endLine":2,"endColumn":38},{"ruleId":"33","severity":1,"message":"34","line":114,"column":21,"nodeType":"35","endLine":114,"endColumn":73},{"ruleId":"33","severity":1,"message":"34","line":138,"column":19,"nodeType":"35","endLine":138,"endColumn":71},{"ruleId":"36","severity":1,"message":"37","line":174,"column":55,"nodeType":"38","messageId":"39","endLine":174,"endColumn":56,"suggestions":"40"},{"ruleId":"33","severity":1,"message":"34","line":197,"column":33,"nodeType":"35","endLine":197,"endColumn":68},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"@typescript-eslint/no-unused-vars","'Menu' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","no-useless-escape","Unnecessary escape character: \\/.","Literal","unnecessaryEscape",["43","44"],"no-global-assign","no-unsafe-negation",{"messageId":"45","fix":"46","desc":"47"},{"messageId":"48","fix":"49","desc":"50"},"removeEscape",{"range":"51","text":"52"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"53","text":"54"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[5456,5457],"",[5456,5456],"\\"]